#include <iostream>

using namespace std;

int sum(int n) {
	// ベースケース：再帰呼び出しを行わずに完了出来る処理
	if (n == 0) {
		// sum0のケースを場合分け
		// 再帰関数が正しく動作するのは、再帰呼出しの連鎖に終わりがあるため。
		// この例ではnが初めに呼び出されたときの値から1ずつ減っていき、
		// 0になるとif文によって分岐され、それ以上再帰呼び出しが怒らなくなり、
		// 呼び出しの連鎖が終わるので上手く動く。
		// つまり、再帰ステップでの再帰呼び出しを繰り返すうちに必ずベースケース
		// に到達することが保証されることで、再帰関数が正しく動作する。
		// この条件を満たさない場合、無限ループになる
		return 0;
	}

	// 再帰ステップ：再帰呼び出しを行い、その結果を用いて行う処理
	// それ以外のケース
	// sum関数のなかでsum関数を呼び出している
	int s = sum(n - 1); // 1 ~ (n-1)の総和を計算
	return s + n; // nを足して返す
}

// 再帰関数を分解すると、それぞれのステップは以下の様な関数に相当する。
// 0~0の総和を求める
int sum0() {
	return 0;
}

// 0~1の総和を求める
int sum1() {
	int s = sum0();
	return s + 1;
}

// 0~2の総和を求める
int sum2() {
	int s = sum1();
	return s + 2;
}

// 0~3の総和を求める
int sum3() {
	int s = sum2();
	return s + 3;
}


int main(int argc, char const* argv[])
{
	cout << sum(2) << endl; // 0 + 1 + 2 = 3
	cout << sum(3) << endl; // 0 + 1 + 2 + 3 = 6
	cout << sum(10) << endl; // 0+1+2+3+4+5+6+7+8+9+10=55

	cout << sum3() << endl; // 6
	return 0;
}
