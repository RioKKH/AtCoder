#include <iostream>
using namespace std;

int H, W, N; // 高さ、幅、N日間に渡って雪が降り続ける
int A[100009]; // 左上の行
int B[100009]; // 左上の列
int C[100009]; // 右下の行
int D[100009]; // 右下の列

int X[1509][1509]; // いもす法1段階目の処理に使う二次元配列
int Z[1509][1509]; // いもす法2段階目の処理に使う二次元配列

// この問題も2次元のいもす法を用いて解く。
int main()
{
    // 入力
    cin >> H >> W >> N;
    for (int t = 1; t <= N; t++)
    {
        // 0番要素は後々の処理で用いる。
        // 0番要素には0が初期値として格納されている
        cin >> A[t] >> B[t] >> C[t] >> D[t];
    }

    /*
     * 配列の0番目の要素に0が格納されていることの確認
    for (int t = 0; t <= N; t++)
    {
        cout << A[t] << B[t] << C[t] << D[t] << std::endl;
    }
    */

    // 
    // いもす法1段階目：各日について加算する --------------------------------------------
    //
    for (int t = 1; t <= N; t++)
    {
        X[A[t]    ][B[t]]     += 1; // 左上に+1を置いておく。横方向の始点となる
        X[A[t]    ][D[t] + 1] -= 1; // 右上の列よりも一つ右に-1を置く。横方向の終点
        X[C[t] + 1][B[t]]     -= 1; // 右下の行よりも一つ下のところに-1を置いて置く
        X[C[t] + 1][D[t] + 1] += 1; // 右下の行より一つ下、列よりも一つ右に+1を置く
    }

    //
    // いもす法2段階目：二次元累積和をとる -----------------------------------------------
    //
    // まずは処理に使う配列の初期化を行う
    for (int i = 0; i <= H; i++) // インデックスは0から
    {
        for (int j = 0; j <= W; j++)
        {
            Z[i][j] = 0;
        }
    }

    // 横方向の累積和
    for (int i = 1; i <= H; i++) // インデックスは1からHまで
    {
        for (int j = 1; j <= W; j++) // インデックスは1からWまで
        {
            // j-1を考える必要があるため、j=0 ~ NのN+1個の要素を持つ配列が必要
            Z[i][j] = Z[i][j-1] + X[i][j];
        }
    }

    // 縦方向の累積和
    for (int j = 1; j <= W; j++) // インデックスは1からWまで
    {
        // 縦方向に足していくので、iが内側のループになる
        for (int i = 1; i <= H; i++) // インデックスは1からHまで
        {
            // i-1を考える必要があるため、i=0 ~ NのN+1個の要素を持つ配列が必要
            Z[i][j] = Z[i - 1][j] + Z[i][j];
        }
    }

    //
    // 出力 -----------------------------------------------------------------------------
    //
    for (int i = 1; i <= H; i++)
    {
        for (int j = 1; j <=W; j++)
        {
            if (j >= 2) cout << " ";
            cout << Z[i][j];
        }
        cout << endl;
    }

    return 0;
}

